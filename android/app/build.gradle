plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

import java.util.Properties
import java.io.FileInputStream

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
def hasKeystore = keystorePropertiesFile.exists()

android {
    namespace = "com.example.finance_tracker"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.finance_tracker"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        // Limit packaged locales to reduce resources size (tweak as needed)
        resConfigs "en", "id"
    }

    buildTypes {
        release {
            // Use release keystore if available, otherwise fall back to debug for local builds
            signingConfig hasKeystore ? signingConfigs.release : signingConfigs.debug
            // Enable shrinking and optimization for smaller APKs
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Optional: limit ABIs at the build.gradle level (smaller universal APK)
    // Prefer building with `--split-per-abi` for best results.
    // ndk {
    //     abiFilters 'arm64-v8a', 'armeabi-v7a'
    // }
}

flutter {
    source = "../.."
}

android {
    signingConfigs {
        release {
            if (hasKeystore) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }
}

dependencies {
    implementation "com.google.android.play:core:1.10.3"
    // jika nanti butuh dynamic feature delivery:
    // implementation "com.google.android.play:feature-delivery:2.1.0"
}
